[build-system]
requires = ["setuptools>=80.9.0", "wheel>=0.45.1"]
build-backend = "setuptools.build_meta"

[project]
name = "hellobellohellobello"
version = "0.1.0"
description = "Multi-Modal Sensor Platform for Advanced Research Data Collection"
requires-python = ">=3.11"
dependencies = [
    "PyQt6>=6.8.0",
    "pyqtgraph>=0.13.7",
    "numpy>=2.0.0",
    "opencv-python>=4.10.0",
    "zeroconf>=0.147.0",
    "pybind11>=3.0.1",
    "pandas>=2.3.2",
    "h5py>=3.14.0",
    "pyinstaller>=6.15.0",
    "psutil>=5.9.8",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-timeout>=2.4.0",
    "ruff>=0.12.11",
    "mypy>=1.17.1",
    "pre-commit>=4.3.0",
    "black>=25.1.0",
    "isort>=6.0.1",
    "bandit>=1.8.6",
    "pytest-cov>=6.2.1",
    "pytest-xvfb>=3.1.1",
    "pytest-xdist>=3.8.0",
]
build = [
    "pyinstaller>=6.15.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["pc_controller*"]
exclude = ["tests*", "android_sensor_node*", "build*", "dist*"]

[tool.ruff]
# Target Python version consistent with project requirements
target-version = "py311"
line-length = 100
# Performance optimization: cache linting results
cache-dir = ".ruff_cache"
exclude = [
  ".pytest_tmp",
  ".venv",
  "build",
  "dist",
  "android_sensor_node",
  "pc_controller/native_backend",
  "docs",
]
# Performance: Enable parallel processing
respect-gitignore = true

[tool.ruff.lint]
# Enable comprehensive rule sets for better code quality:
# - E/F/W (pycodestyle/pyflakes), I (isort), B (flake8-bugbear), UP (pyupgrade)
# - PERF (performance optimizations), RUF (Ruff-specific rules)
select = ["E", "F", "W", "I", "B", "UP", "PERF", "RUF"]
ignore = [
  # Allow module-level prints in tools/scripts
  "T201",
]
# Performance optimizations
unfixable = ["B"]  # Don't auto-fix bugbear issues that need manual review

[tool.ruff.lint.isort]
known-first-party = ["pc_controller"]

[tool.mypy]
python_version = "3.11"
# Check only our Python controller package by default
packages = ["pc_controller"]
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
strict_optional = true
no_implicit_optional = true
follow_imports = "silent"
show_error_codes = true
# Performance optimizations
cache_dir = ".mypy_cache"
incremental = true
exclude = [
  "android_sensor_node",
  "pc_controller/native_backend",
  "docs",
  "tests?",
  ".pytest_tmp",
]

# Pytest performance optimizations
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["pc_controller/tests", "tests"]
python_files = ["test_*.py", "*_test.py", "test*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Performance: run tests in parallel using pytest-xdist
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=pc_controller",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-report=term-missing:skip-covered",
    "--cov-fail-under=70",
    "-n", "auto",  # Use all available CPUs for parallel testing
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance benchmarks",
    "unit: marks tests as unit tests",
]
# Cache test results for faster re-runs
cache_dir = ".pytest_cache"
# Performance: disable plugins we don't need
disable_plugins = ["cacheprovider"]
